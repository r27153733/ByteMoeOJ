// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.2
// source: wasmexecutor.proto

package wasm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_None CompressionType = 0
	CompressionType_Zstd CompressionType = 2
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "None",
		2: "Zstd",
	}
	CompressionType_value = map[string]int32{
		"None": 0,
		"Zstd": 2,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_wasmexecutor_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_wasmexecutor_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_wasmexecutor_proto_rawDescGZIP(), []int{0}
}

type WasmExecutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input data for stdin (as a byte array).
	Stdin []byte `protobuf:"bytes,1,opt,name=stdin,proto3" json:"stdin,omitempty"`
	// Arguments to be passed to the Wasm module.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Environment variables to be set for the Wasm module.
	Envs map[string]string `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Memory limit for the Wasm module in bytes.
	MemoryLimit uint64 `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	// Fuel limit for the Wasm module (used for controlling execution steps).
	FuelLimit uint64 `protobuf:"varint,5,opt,name=fuel_limit,json=fuelLimit,proto3" json:"fuel_limit,omitempty"`
	// The maximum size of the output buffer for stdout, in bytes.
	StdoutLimit uint64 `protobuf:"varint,6,opt,name=stdout_limit,json=stdoutLimit,proto3" json:"stdout_limit,omitempty"`
	// The maximum size of the output buffer for stderr, in bytes.
	StderrLimit uint64 `protobuf:"varint,7,opt,name=stderr_limit,json=stderrLimit,proto3" json:"stderr_limit,omitempty"`
}

func (x *WasmExecutionInput) Reset() {
	*x = WasmExecutionInput{}
	mi := &file_wasmexecutor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmExecutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmExecutionInput) ProtoMessage() {}

func (x *WasmExecutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_wasmexecutor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmExecutionInput.ProtoReflect.Descriptor instead.
func (*WasmExecutionInput) Descriptor() ([]byte, []int) {
	return file_wasmexecutor_proto_rawDescGZIP(), []int{0}
}

func (x *WasmExecutionInput) GetStdin() []byte {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *WasmExecutionInput) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *WasmExecutionInput) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *WasmExecutionInput) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *WasmExecutionInput) GetFuelLimit() uint64 {
	if x != nil {
		return x.FuelLimit
	}
	return 0
}

func (x *WasmExecutionInput) GetStdoutLimit() uint64 {
	if x != nil {
		return x.StdoutLimit
	}
	return 0
}

func (x *WasmExecutionInput) GetStderrLimit() uint64 {
	if x != nil {
		return x.StderrLimit
	}
	return 0
}

type WasmExecutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output produced by the Wasm module's stdout.
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// The output produced by the Wasm module's stderr.
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// The amount of memory used during execution in bytes.
	MemoryUsed uint64 `protobuf:"varint,3,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	// The amount of fuel consumed during execution.
	FuelConsumed uint64 `protobuf:"varint,4,opt,name=fuel_consumed,json=fuelConsumed,proto3" json:"fuel_consumed,omitempty"`
	// Whether the Wasm module ran successfully or not.
	Status uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// The hash of the bytes if requested.
	StdoutHash uint64 `protobuf:"varint,6,opt,name=stdout_hash,json=stdoutHash,proto3" json:"stdout_hash,omitempty"`
	// The hash of the token stream if requested.
	StdoutTokenStreamHash uint64 `protobuf:"varint,7,opt,name=stdout_token_stream_hash,json=stdoutTokenStreamHash,proto3" json:"stdout_token_stream_hash,omitempty"`
}

func (x *WasmExecutionOutput) Reset() {
	*x = WasmExecutionOutput{}
	mi := &file_wasmexecutor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmExecutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmExecutionOutput) ProtoMessage() {}

func (x *WasmExecutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_wasmexecutor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmExecutionOutput.ProtoReflect.Descriptor instead.
func (*WasmExecutionOutput) Descriptor() ([]byte, []int) {
	return file_wasmexecutor_proto_rawDescGZIP(), []int{1}
}

func (x *WasmExecutionOutput) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *WasmExecutionOutput) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *WasmExecutionOutput) GetMemoryUsed() uint64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *WasmExecutionOutput) GetFuelConsumed() uint64 {
	if x != nil {
		return x.FuelConsumed
	}
	return 0
}

func (x *WasmExecutionOutput) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WasmExecutionOutput) GetStdoutHash() uint64 {
	if x != nil {
		return x.StdoutHash
	}
	return 0
}

func (x *WasmExecutionOutput) GetStdoutTokenStreamHash() uint64 {
	if x != nil {
		return x.StdoutTokenStreamHash
	}
	return 0
}

type WasmExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Wasm binary to be executed (as a byte array).
	WasmBinaryArr [][]byte              `protobuf:"bytes,1,rep,name=wasm_binary_arr,json=wasmBinaryArr,proto3" json:"wasm_binary_arr,omitempty"`
	Inputs        []*WasmExecutionInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Preferred compression type for bytes.
	Compression CompressionType `protobuf:"varint,9,opt,name=compression,proto3,enum=wasm.CompressionType" json:"compression,omitempty"`
	// Option to return only the hash of the bytes and token stream hash.
	ReturnHashOnly bool `protobuf:"varint,10,opt,name=return_hash_only,json=returnHashOnly,proto3" json:"return_hash_only,omitempty"`
}

func (x *WasmExecutionRequest) Reset() {
	*x = WasmExecutionRequest{}
	mi := &file_wasmexecutor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmExecutionRequest) ProtoMessage() {}

func (x *WasmExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wasmexecutor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmExecutionRequest.ProtoReflect.Descriptor instead.
func (*WasmExecutionRequest) Descriptor() ([]byte, []int) {
	return file_wasmexecutor_proto_rawDescGZIP(), []int{2}
}

func (x *WasmExecutionRequest) GetWasmBinaryArr() [][]byte {
	if x != nil {
		return x.WasmBinaryArr
	}
	return nil
}

func (x *WasmExecutionRequest) GetInputs() []*WasmExecutionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *WasmExecutionRequest) GetCompression() CompressionType {
	if x != nil {
		return x.Compression
	}
	return CompressionType_None
}

func (x *WasmExecutionRequest) GetReturnHashOnly() bool {
	if x != nil {
		return x.ReturnHashOnly
	}
	return false
}

type WasmExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*WasmExecutionOutput `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *WasmExecutionResponse) Reset() {
	*x = WasmExecutionResponse{}
	mi := &file_wasmexecutor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmExecutionResponse) ProtoMessage() {}

func (x *WasmExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wasmexecutor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmExecutionResponse.ProtoReflect.Descriptor instead.
func (*WasmExecutionResponse) Descriptor() ([]byte, []int) {
	return file_wasmexecutor_proto_rawDescGZIP(), []int{3}
}

func (x *WasmExecutionResponse) GetOutputs() []*WasmExecutionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_wasmexecutor_proto protoreflect.FileDescriptor

var file_wasmexecutor_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x61, 0x73, 0x6d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x22, 0xb7, 0x02, 0x0a, 0x12, 0x57,
	0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x75, 0x65, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x45,
	0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xd3, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x77, 0x61, 0x73, 0x6d, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x41, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x57, 0x61, 0x73,
	0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x15, 0x57, 0x61,
	0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x57, 0x61, 0x73, 0x6d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2a, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x73, 0x74, 0x64, 0x10, 0x02, 0x32,
	0x52, 0x0a, 0x0c, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x73,
	0x6d, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x57, 0x61,
	0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wasmexecutor_proto_rawDescOnce sync.Once
	file_wasmexecutor_proto_rawDescData = file_wasmexecutor_proto_rawDesc
)

func file_wasmexecutor_proto_rawDescGZIP() []byte {
	file_wasmexecutor_proto_rawDescOnce.Do(func() {
		file_wasmexecutor_proto_rawDescData = protoimpl.X.CompressGZIP(file_wasmexecutor_proto_rawDescData)
	})
	return file_wasmexecutor_proto_rawDescData
}

var file_wasmexecutor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wasmexecutor_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_wasmexecutor_proto_goTypes = []any{
	(CompressionType)(0),          // 0: wasm.CompressionType
	(*WasmExecutionInput)(nil),    // 1: wasm.WasmExecutionInput
	(*WasmExecutionOutput)(nil),   // 2: wasm.WasmExecutionOutput
	(*WasmExecutionRequest)(nil),  // 3: wasm.WasmExecutionRequest
	(*WasmExecutionResponse)(nil), // 4: wasm.WasmExecutionResponse
	nil,                           // 5: wasm.WasmExecutionInput.EnvsEntry
}
var file_wasmexecutor_proto_depIdxs = []int32{
	5, // 0: wasm.WasmExecutionInput.envs:type_name -> wasm.WasmExecutionInput.EnvsEntry
	1, // 1: wasm.WasmExecutionRequest.inputs:type_name -> wasm.WasmExecutionInput
	0, // 2: wasm.WasmExecutionRequest.compression:type_name -> wasm.CompressionType
	2, // 3: wasm.WasmExecutionResponse.outputs:type_name -> wasm.WasmExecutionOutput
	3, // 4: wasm.WasmExecutor.Execute:input_type -> wasm.WasmExecutionRequest
	4, // 5: wasm.WasmExecutor.Execute:output_type -> wasm.WasmExecutionResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wasmexecutor_proto_init() }
func file_wasmexecutor_proto_init() {
	if File_wasmexecutor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wasmexecutor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wasmexecutor_proto_goTypes,
		DependencyIndexes: file_wasmexecutor_proto_depIdxs,
		EnumInfos:         file_wasmexecutor_proto_enumTypes,
		MessageInfos:      file_wasmexecutor_proto_msgTypes,
	}.Build()
	File_wasmexecutor_proto = out.File
	file_wasmexecutor_proto_rawDesc = nil
	file_wasmexecutor_proto_goTypes = nil
	file_wasmexecutor_proto_depIdxs = nil
}

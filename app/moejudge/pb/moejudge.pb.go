// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pb/moejudge.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LangType int32

const (
	LangType_golang LangType = 0
	LangType_rust   LangType = 1
	LangType_c      LangType = 2
	LangType_cpp    LangType = 3
	LangType_java   LangType = 4
)

// Enum value maps for LangType.
var (
	LangType_name = map[int32]string{
		0: "golang",
		1: "rust",
		2: "c",
		3: "cpp",
		4: "java",
	}
	LangType_value = map[string]int32{
		"golang": 0,
		"rust":   1,
		"c":      2,
		"cpp":    3,
		"java":   4,
	}
)

func (x LangType) Enum() *LangType {
	p := new(LangType)
	*p = x
	return p
}

func (x LangType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LangType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_moejudge_proto_enumTypes[0].Descriptor()
}

func (LangType) Type() protoreflect.EnumType {
	return &file_pb_moejudge_proto_enumTypes[0]
}

func (x LangType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LangType.Descriptor instead.
func (LangType) EnumDescriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{0}
}

// 判题结果
type JudgeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // 判题结果 ID
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`              // 用户 ID
	Status        uint32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                           // 判题状态
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                // 代码内容
	Lang          LangType               `protobuf:"varint,5,opt,name=lang,proto3,enum=LangType" json:"lang,omitempty"`                 // 编程语言
	TimeUsed      uint64                 `protobuf:"varint,6,opt,name=time_used,json=timeUsed,proto3" json:"time_used,omitempty"`       // 用时（可选）
	MemoryUsed    uint64                 `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"` // 使用内存（可选）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeResult) Reset() {
	*x = JudgeResult{}
	mi := &file_pb_moejudge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeResult) ProtoMessage() {}

func (x *JudgeResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeResult.ProtoReflect.Descriptor instead.
func (*JudgeResult) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{0}
}

func (x *JudgeResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JudgeResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JudgeResult) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *JudgeResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *JudgeResult) GetLang() LangType {
	if x != nil {
		return x.Lang
	}
	return LangType_golang
}

func (x *JudgeResult) GetTimeUsed() uint64 {
	if x != nil {
		return x.TimeUsed
	}
	return 0
}

func (x *JudgeResult) GetMemoryUsed() uint64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

// 提交判题请求
type JudgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"` // 题目 ID
	Code          []byte                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                            // 代码内容
	Lang          LangType               `protobuf:"varint,4,opt,name=lang,proto3,enum=LangType" json:"lang,omitempty"`             // 编程语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeReq) Reset() {
	*x = JudgeReq{}
	mi := &file_pb_moejudge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeReq) ProtoMessage() {}

func (x *JudgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeReq.ProtoReflect.Descriptor instead.
func (*JudgeReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{1}
}

func (x *JudgeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JudgeReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *JudgeReq) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *JudgeReq) GetLang() LangType {
	if x != nil {
		return x.Lang
	}
	return LangType_golang
}

// 提交判题响应
type JudgeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *JudgeResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 判题结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeResp) Reset() {
	*x = JudgeResp{}
	mi := &file_pb_moejudge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeResp) ProtoMessage() {}

func (x *JudgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeResp.ProtoReflect.Descriptor instead.
func (*JudgeResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{2}
}

func (x *JudgeResp) GetResult() *JudgeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// 判题状态查询请求
type JudgeStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JudgeId       string                 `protobuf:"bytes,2,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"` // 提交 ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeStatusReq) Reset() {
	*x = JudgeStatusReq{}
	mi := &file_pb_moejudge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeStatusReq) ProtoMessage() {}

func (x *JudgeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeStatusReq.ProtoReflect.Descriptor instead.
func (*JudgeStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{3}
}

func (x *JudgeStatusReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JudgeStatusReq) GetJudgeId() string {
	if x != nil {
		return x.JudgeId
	}
	return ""
}

// 判题状态查询响应
type JudgeStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *JudgeResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 判题结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeStatusResp) Reset() {
	*x = JudgeStatusResp{}
	mi := &file_pb_moejudge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeStatusResp) ProtoMessage() {}

func (x *JudgeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeStatusResp.ProtoReflect.Descriptor instead.
func (*JudgeStatusResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{4}
}

func (x *JudgeStatusResp) GetResult() *JudgeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// 判题列表查询请求
type ListJudgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JudgeId       string                 `protobuf:"bytes,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`       // ID（可选）
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户 ID（可选）
	ProblemId     string                 `protobuf:"bytes,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"` // 题目 ID（可选）
	GroupId       string                 `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`       // 组 ID（可选）
	Lang          LangType               `protobuf:"varint,5,opt,name=lang,proto3,enum=LangType" json:"lang,omitempty"`
	Status        uint32                 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                     // 判题状态（可选）
	Page          int32                  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`                         // 分页页码（可选）
	PageSize      int32                  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 分页大小（可选）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJudgeReq) Reset() {
	*x = ListJudgeReq{}
	mi := &file_pb_moejudge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJudgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJudgeReq) ProtoMessage() {}

func (x *ListJudgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJudgeReq.ProtoReflect.Descriptor instead.
func (*ListJudgeReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{5}
}

func (x *ListJudgeReq) GetJudgeId() string {
	if x != nil {
		return x.JudgeId
	}
	return ""
}

func (x *ListJudgeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListJudgeReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListJudgeReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ListJudgeReq) GetLang() LangType {
	if x != nil {
		return x.Lang
	}
	return LangType_golang
}

func (x *ListJudgeReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListJudgeReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListJudgeReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 判题列表查询响应
type ListJudgeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*JudgeResult         `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                          // 判题结果列表
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总记录数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页码
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 当前页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJudgeResp) Reset() {
	*x = ListJudgeResp{}
	mi := &file_pb_moejudge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJudgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJudgeResp) ProtoMessage() {}

func (x *ListJudgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJudgeResp.ProtoReflect.Descriptor instead.
func (*ListJudgeResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{6}
}

func (x *ListJudgeResp) GetList() []*JudgeResult {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListJudgeResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListJudgeResp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListJudgeResp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 尝试运行请求
type TryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"` // 题目 ID
	Code          []byte                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                            // 代码内容
	Input         []byte                 `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Lang          LangType               `protobuf:"varint,5,opt,name=lang,proto3,enum=LangType" json:"lang,omitempty"` // 编程语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryReq) Reset() {
	*x = TryReq{}
	mi := &file_pb_moejudge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryReq) ProtoMessage() {}

func (x *TryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryReq.ProtoReflect.Descriptor instead.
func (*TryReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{7}
}

func (x *TryReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TryReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *TryReq) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *TryReq) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TryReq) GetLang() LangType {
	if x != nil {
		return x.Lang
	}
	return LangType_golang
}

// 尝试运行响应
type TryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        string                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"` // 输出结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryResp) Reset() {
	*x = TryResp{}
	mi := &file_pb_moejudge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryResp) ProtoMessage() {}

func (x *TryResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryResp.ProtoReflect.Descriptor instead.
func (*TryResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{8}
}

func (x *TryResp) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// 获取 Wasm 请求
type WasmReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"` // 题目 ID
	Code          []byte                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                            // 代码内容
	Lang          LangType               `protobuf:"varint,4,opt,name=lang,proto3,enum=LangType" json:"lang,omitempty"`             // 编程语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WasmReq) Reset() {
	*x = WasmReq{}
	mi := &file_pb_moejudge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmReq) ProtoMessage() {}

func (x *WasmReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmReq.ProtoReflect.Descriptor instead.
func (*WasmReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{9}
}

func (x *WasmReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WasmReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *WasmReq) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *WasmReq) GetLang() LangType {
	if x != nil {
		return x.Lang
	}
	return LangType_golang
}

// 获取 Wasm 响应
type WasmResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WasmBinary    []byte                 `protobuf:"bytes,1,opt,name=wasm_binary,json=wasmBinary,proto3" json:"wasm_binary,omitempty"` // Wasm 二进制数据
	CompileErr    string                 `protobuf:"bytes,2,opt,name=compile_err,json=compileErr,proto3" json:"compile_err,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WasmResp) Reset() {
	*x = WasmResp{}
	mi := &file_pb_moejudge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmResp) ProtoMessage() {}

func (x *WasmResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmResp.ProtoReflect.Descriptor instead.
func (*WasmResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{10}
}

func (x *WasmResp) GetWasmBinary() []byte {
	if x != nil {
		return x.WasmBinary
	}
	return nil
}

func (x *WasmResp) GetCompileErr() string {
	if x != nil {
		return x.CompileErr
	}
	return ""
}

type Group struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_pb_moejudge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{11}
}

func (x *Group) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	mi := &file_pb_moejudge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{12}
}

func (x *CreateGroupReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateGroupReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateGroupReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	mi := &file_pb_moejudge_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{13}
}

func (x *CreateGroupResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteGroupReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatorUserId string                 `protobuf:"bytes,2,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteGroupReq) Reset() {
	*x = DeleteGroupReq{}
	mi := &file_pb_moejudge_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReq) ProtoMessage() {}

func (x *DeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteGroupReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteGroupReq) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type DeleteGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGroupResp) Reset() {
	*x = DeleteGroupResp{}
	mi := &file_pb_moejudge_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupResp) ProtoMessage() {}

func (x *DeleteGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{15}
}

type ListGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MinRole       uint32                 `protobuf:"varint,3,opt,name=min_role,json=minRole,proto3" json:"min_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupReq) Reset() {
	*x = ListGroupReq{}
	mi := &file_pb_moejudge_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupReq) ProtoMessage() {}

func (x *ListGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupReq.ProtoReflect.Descriptor instead.
func (*ListGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{16}
}

func (x *ListGroupReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ListGroupReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListGroupReq) GetMinRole() uint32 {
	if x != nil {
		return x.MinRole
	}
	return 0
}

type ListGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*Group               `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupResp) Reset() {
	*x = ListGroupResp{}
	mi := &file_pb_moejudge_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupResp) ProtoMessage() {}

func (x *ListGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupResp.ProtoReflect.Descriptor instead.
func (*ListGroupResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{17}
}

func (x *ListGroupResp) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupSetUserRoleReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OperatorUserId string                 `protobuf:"bytes,1,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	GroupId        string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId         string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role           uint32                 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupSetUserRoleReq) Reset() {
	*x = GroupSetUserRoleReq{}
	mi := &file_pb_moejudge_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupSetUserRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSetUserRoleReq) ProtoMessage() {}

func (x *GroupSetUserRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSetUserRoleReq.ProtoReflect.Descriptor instead.
func (*GroupSetUserRoleReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{18}
}

func (x *GroupSetUserRoleReq) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *GroupSetUserRoleReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupSetUserRoleReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GroupSetUserRoleReq) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type GroupSetUserRoleResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupSetUserRoleResp) Reset() {
	*x = GroupSetUserRoleResp{}
	mi := &file_pb_moejudge_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupSetUserRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSetUserRoleResp) ProtoMessage() {}

func (x *GroupSetUserRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSetUserRoleResp.ProtoReflect.Descriptor instead.
func (*GroupSetUserRoleResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{19}
}

type GroupDeleteUserReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OperatorUserId string                 `protobuf:"bytes,1,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	GroupId        string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId         string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupDeleteUserReq) Reset() {
	*x = GroupDeleteUserReq{}
	mi := &file_pb_moejudge_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDeleteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteUserReq) ProtoMessage() {}

func (x *GroupDeleteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteUserReq.ProtoReflect.Descriptor instead.
func (*GroupDeleteUserReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{20}
}

func (x *GroupDeleteUserReq) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *GroupDeleteUserReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupDeleteUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GroupDeleteUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDeleteUserResp) Reset() {
	*x = GroupDeleteUserResp{}
	mi := &file_pb_moejudge_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDeleteUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteUserResp) ProtoMessage() {}

func (x *GroupDeleteUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteUserResp.ProtoReflect.Descriptor instead.
func (*GroupDeleteUserResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{21}
}

type GroupAddProblemReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OperatorUserId string                 `protobuf:"bytes,1,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	GroupId        string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ProblemId      string                 `protobuf:"bytes,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupAddProblemReq) Reset() {
	*x = GroupAddProblemReq{}
	mi := &file_pb_moejudge_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupAddProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddProblemReq) ProtoMessage() {}

func (x *GroupAddProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddProblemReq.ProtoReflect.Descriptor instead.
func (*GroupAddProblemReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{22}
}

func (x *GroupAddProblemReq) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *GroupAddProblemReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupAddProblemReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type GroupAddProblemResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupAddProblemResp) Reset() {
	*x = GroupAddProblemResp{}
	mi := &file_pb_moejudge_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupAddProblemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddProblemResp) ProtoMessage() {}

func (x *GroupAddProblemResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddProblemResp.ProtoReflect.Descriptor instead.
func (*GroupAddProblemResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{23}
}

type GroupDeleteProblemReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OperatorUserId string                 `protobuf:"bytes,1,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	GroupId        string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ProblemId      string                 `protobuf:"bytes,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupDeleteProblemReq) Reset() {
	*x = GroupDeleteProblemReq{}
	mi := &file_pb_moejudge_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDeleteProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteProblemReq) ProtoMessage() {}

func (x *GroupDeleteProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteProblemReq.ProtoReflect.Descriptor instead.
func (*GroupDeleteProblemReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{24}
}

func (x *GroupDeleteProblemReq) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *GroupDeleteProblemReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupDeleteProblemReq) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type GroupDeleteProblemResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDeleteProblemResp) Reset() {
	*x = GroupDeleteProblemResp{}
	mi := &file_pb_moejudge_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDeleteProblemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteProblemResp) ProtoMessage() {}

func (x *GroupDeleteProblemResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteProblemResp.ProtoReflect.Descriptor instead.
func (*GroupDeleteProblemResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{25}
}

type LangCtx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          uint32                 `protobuf:"varint,1,opt,name=lang,proto3" json:"lang,omitempty"`
	InitCode      string                 `protobuf:"bytes,2,opt,name=init_code,json=initCode,proto3" json:"init_code,omitempty"`
	Template      string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LangCtx) Reset() {
	*x = LangCtx{}
	mi := &file_pb_moejudge_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LangCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangCtx) ProtoMessage() {}

func (x *LangCtx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangCtx.ProtoReflect.Descriptor instead.
func (*LangCtx) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{26}
}

func (x *LangCtx) GetLang() uint32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *LangCtx) GetInitCode() string {
	if x != nil {
		return x.InitCode
	}
	return ""
}

func (x *LangCtx) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type JudgeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output        string                 `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JudgeData) Reset() {
	*x = JudgeData{}
	mi := &file_pb_moejudge_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JudgeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeData) ProtoMessage() {}

func (x *JudgeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeData.ProtoReflect.Descriptor instead.
func (*JudgeData) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{27}
}

func (x *JudgeData) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *JudgeData) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type CreateProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Difficulty    uint32                 `protobuf:"varint,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	LangCtxArr    []*LangCtx             `protobuf:"bytes,4,rep,name=lang_ctx_arr,json=langCtxArr,proto3" json:"lang_ctx_arr,omitempty"`
	JudgeDataArr  []*JudgeData           `protobuf:"bytes,5,rep,name=judge_data_arr,json=judgeDataArr,proto3" json:"judge_data_arr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemReq) Reset() {
	*x = CreateProblemReq{}
	mi := &file_pb_moejudge_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemReq) ProtoMessage() {}

func (x *CreateProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemReq.ProtoReflect.Descriptor instead.
func (*CreateProblemReq) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{28}
}

func (x *CreateProblemReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProblemReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateProblemReq) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *CreateProblemReq) GetLangCtxArr() []*LangCtx {
	if x != nil {
		return x.LangCtxArr
	}
	return nil
}

func (x *CreateProblemReq) GetJudgeDataArr() []*JudgeData {
	if x != nil {
		return x.JudgeDataArr
	}
	return nil
}

type CreateProblemResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemResp) Reset() {
	*x = CreateProblemResp{}
	mi := &file_pb_moejudge_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResp) ProtoMessage() {}

func (x *CreateProblemResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_moejudge_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResp.ProtoReflect.Descriptor instead.
func (*CreateProblemResp) Descriptor() ([]byte, []int) {
	return file_pb_moejudge_proto_rawDescGZIP(), []int{29}
}

func (x *CreateProblemResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_pb_moejudge_proto protoreflect.FileDescriptor

var file_pb_moejudge_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x65, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x08, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x09,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x44, 0x0a, 0x0e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0f, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe4,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x78, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x06, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x21, 0x0a, 0x07, 0x54,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x74,
	0x0a, 0x07, 0x57, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x22, 0x4c, 0x0a, 0x08, 0x57, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x77, 0x61, 0x73, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x22, 0x2b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5d, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72,
	0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7b, 0x0a, 0x15, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x56, 0x0a, 0x07, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x5f, 0x63, 0x74, 0x78, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x74, 0x78, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x43,
	0x74, 0x78, 0x41, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x0e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x22, 0x23, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x3a, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x75, 0x73, 0x74, 0x10, 0x01, 0x12, 0x05,
	0x0a, 0x01, 0x63, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x70, 0x70, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x6a, 0x61, 0x76, 0x61, 0x10, 0x04, 0x32, 0x9a, 0x05, 0x0a, 0x0b, 0x4d, 0x6f, 0x65,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x76, 0x63, 0x12, 0x2a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x12, 0x09, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0a,
	0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x03, 0x54, 0x72, 0x79, 0x12, 0x07, 0x2e, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x08, 0x2e, 0x54, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x73, 0x6d, 0x12, 0x08, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x57, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x11, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x0e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3f, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x12, 0x13, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pb_moejudge_proto_rawDescOnce sync.Once
	file_pb_moejudge_proto_rawDescData []byte
)

func file_pb_moejudge_proto_rawDescGZIP() []byte {
	file_pb_moejudge_proto_rawDescOnce.Do(func() {
		file_pb_moejudge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_moejudge_proto_rawDesc), len(file_pb_moejudge_proto_rawDesc)))
	})
	return file_pb_moejudge_proto_rawDescData
}

var file_pb_moejudge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_moejudge_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_pb_moejudge_proto_goTypes = []any{
	(LangType)(0),                  // 0: LangType
	(*JudgeResult)(nil),            // 1: JudgeResult
	(*JudgeReq)(nil),               // 2: JudgeReq
	(*JudgeResp)(nil),              // 3: JudgeResp
	(*JudgeStatusReq)(nil),         // 4: JudgeStatusReq
	(*JudgeStatusResp)(nil),        // 5: JudgeStatusResp
	(*ListJudgeReq)(nil),           // 6: ListJudgeReq
	(*ListJudgeResp)(nil),          // 7: ListJudgeResp
	(*TryReq)(nil),                 // 8: TryReq
	(*TryResp)(nil),                // 9: TryResp
	(*WasmReq)(nil),                // 10: WasmReq
	(*WasmResp)(nil),               // 11: WasmResp
	(*Group)(nil),                  // 12: Group
	(*CreateGroupReq)(nil),         // 13: CreateGroupReq
	(*CreateGroupResp)(nil),        // 14: CreateGroupResp
	(*DeleteGroupReq)(nil),         // 15: DeleteGroupReq
	(*DeleteGroupResp)(nil),        // 16: DeleteGroupResp
	(*ListGroupReq)(nil),           // 17: ListGroupReq
	(*ListGroupResp)(nil),          // 18: ListGroupResp
	(*GroupSetUserRoleReq)(nil),    // 19: GroupSetUserRoleReq
	(*GroupSetUserRoleResp)(nil),   // 20: GroupSetUserRoleResp
	(*GroupDeleteUserReq)(nil),     // 21: GroupDeleteUserReq
	(*GroupDeleteUserResp)(nil),    // 22: GroupDeleteUserResp
	(*GroupAddProblemReq)(nil),     // 23: GroupAddProblemReq
	(*GroupAddProblemResp)(nil),    // 24: GroupAddProblemResp
	(*GroupDeleteProblemReq)(nil),  // 25: GroupDeleteProblemReq
	(*GroupDeleteProblemResp)(nil), // 26: GroupDeleteProblemResp
	(*LangCtx)(nil),                // 27: LangCtx
	(*JudgeData)(nil),              // 28: JudgeData
	(*CreateProblemReq)(nil),       // 29: CreateProblemReq
	(*CreateProblemResp)(nil),      // 30: CreateProblemResp
}
var file_pb_moejudge_proto_depIdxs = []int32{
	0,  // 0: JudgeResult.lang:type_name -> LangType
	0,  // 1: JudgeReq.lang:type_name -> LangType
	1,  // 2: JudgeResp.result:type_name -> JudgeResult
	1,  // 3: JudgeStatusResp.result:type_name -> JudgeResult
	0,  // 4: ListJudgeReq.lang:type_name -> LangType
	1,  // 5: ListJudgeResp.list:type_name -> JudgeResult
	0,  // 6: TryReq.lang:type_name -> LangType
	0,  // 7: WasmReq.lang:type_name -> LangType
	12, // 8: ListGroupResp.groups:type_name -> Group
	27, // 9: CreateProblemReq.lang_ctx_arr:type_name -> LangCtx
	28, // 10: CreateProblemReq.judge_data_arr:type_name -> JudgeData
	6,  // 11: MoeJudgeSvc.ListJudge:input_type -> ListJudgeReq
	2,  // 12: MoeJudgeSvc.SubmitJudge:input_type -> JudgeReq
	4,  // 13: MoeJudgeSvc.GetJudgeStatus:input_type -> JudgeStatusReq
	8,  // 14: MoeJudgeSvc.Try:input_type -> TryReq
	10, // 15: MoeJudgeSvc.GetWasm:input_type -> WasmReq
	29, // 16: MoeJudgeSvc.CreateProblem:input_type -> CreateProblemReq
	13, // 17: MoeJudgeSvc.CreateGroup:input_type -> CreateGroupReq
	15, // 18: MoeJudgeSvc.DeleteGroup:input_type -> DeleteGroupReq
	17, // 19: MoeJudgeSvc.ListGroup:input_type -> ListGroupReq
	19, // 20: MoeJudgeSvc.GroupSetUserRole:input_type -> GroupSetUserRoleReq
	21, // 21: MoeJudgeSvc.GroupDeleteUser:input_type -> GroupDeleteUserReq
	23, // 22: MoeJudgeSvc.GroupAddProblem:input_type -> GroupAddProblemReq
	25, // 23: MoeJudgeSvc.GroupDeleteProblem:input_type -> GroupDeleteProblemReq
	7,  // 24: MoeJudgeSvc.ListJudge:output_type -> ListJudgeResp
	3,  // 25: MoeJudgeSvc.SubmitJudge:output_type -> JudgeResp
	5,  // 26: MoeJudgeSvc.GetJudgeStatus:output_type -> JudgeStatusResp
	9,  // 27: MoeJudgeSvc.Try:output_type -> TryResp
	11, // 28: MoeJudgeSvc.GetWasm:output_type -> WasmResp
	30, // 29: MoeJudgeSvc.CreateProblem:output_type -> CreateProblemResp
	14, // 30: MoeJudgeSvc.CreateGroup:output_type -> CreateGroupResp
	16, // 31: MoeJudgeSvc.DeleteGroup:output_type -> DeleteGroupResp
	18, // 32: MoeJudgeSvc.ListGroup:output_type -> ListGroupResp
	20, // 33: MoeJudgeSvc.GroupSetUserRole:output_type -> GroupSetUserRoleResp
	22, // 34: MoeJudgeSvc.GroupDeleteUser:output_type -> GroupDeleteUserResp
	24, // 35: MoeJudgeSvc.GroupAddProblem:output_type -> GroupAddProblemResp
	26, // 36: MoeJudgeSvc.GroupDeleteProblem:output_type -> GroupDeleteProblemResp
	24, // [24:37] is the sub-list for method output_type
	11, // [11:24] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pb_moejudge_proto_init() }
func file_pb_moejudge_proto_init() {
	if File_pb_moejudge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_moejudge_proto_rawDesc), len(file_pb_moejudge_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_moejudge_proto_goTypes,
		DependencyIndexes: file_pb_moejudge_proto_depIdxs,
		EnumInfos:         file_pb_moejudge_proto_enumTypes,
		MessageInfos:      file_pb_moejudge_proto_msgTypes,
	}.Build()
	File_pb_moejudge_proto = out.File
	file_pb_moejudge_proto_goTypes = nil
	file_pb_moejudge_proto_depIdxs = nil
}

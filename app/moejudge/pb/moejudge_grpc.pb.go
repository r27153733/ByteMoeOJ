// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: pb/moejudge.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MoeJudgeSvc_ListJudge_FullMethodName          = "/MoeJudgeSvc/ListJudge"
	MoeJudgeSvc_SubmitJudge_FullMethodName        = "/MoeJudgeSvc/SubmitJudge"
	MoeJudgeSvc_GetJudgeStatus_FullMethodName     = "/MoeJudgeSvc/GetJudgeStatus"
	MoeJudgeSvc_Try_FullMethodName                = "/MoeJudgeSvc/Try"
	MoeJudgeSvc_GetWasm_FullMethodName            = "/MoeJudgeSvc/GetWasm"
	MoeJudgeSvc_CreateProblem_FullMethodName      = "/MoeJudgeSvc/CreateProblem"
	MoeJudgeSvc_CreateGroup_FullMethodName        = "/MoeJudgeSvc/CreateGroup"
	MoeJudgeSvc_DeleteGroup_FullMethodName        = "/MoeJudgeSvc/DeleteGroup"
	MoeJudgeSvc_ListGroup_FullMethodName          = "/MoeJudgeSvc/ListGroup"
	MoeJudgeSvc_GroupSetUserRole_FullMethodName   = "/MoeJudgeSvc/GroupSetUserRole"
	MoeJudgeSvc_GroupDeleteUser_FullMethodName    = "/MoeJudgeSvc/GroupDeleteUser"
	MoeJudgeSvc_GroupAddProblem_FullMethodName    = "/MoeJudgeSvc/GroupAddProblem"
	MoeJudgeSvc_GroupDeleteProblem_FullMethodName = "/MoeJudgeSvc/GroupDeleteProblem"
)

// MoeJudgeSvcClient is the client API for MoeJudgeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义判题服务
type MoeJudgeSvcClient interface {
	// 查询判题列表
	ListJudge(ctx context.Context, in *ListJudgeReq, opts ...grpc.CallOption) (*ListJudgeResp, error)
	// 提交判题请求
	SubmitJudge(ctx context.Context, in *JudgeReq, opts ...grpc.CallOption) (*JudgeResp, error)
	// 查询判题状态
	GetJudgeStatus(ctx context.Context, in *JudgeStatusReq, opts ...grpc.CallOption) (*JudgeStatusResp, error)
	// 尝试运行
	Try(ctx context.Context, in *TryReq, opts ...grpc.CallOption) (*TryResp, error)
	// 获取判题 Wasm
	GetWasm(ctx context.Context, in *WasmReq, opts ...grpc.CallOption) (*WasmResp, error)
	// 创建问题
	CreateProblem(ctx context.Context, in *CreateProblemReq, opts ...grpc.CallOption) (*CreateProblemResp, error)
	// 创建组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 删除组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	// 获取组列表
	ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error)
	// 设置组用户角色
	GroupSetUserRole(ctx context.Context, in *GroupSetUserRoleReq, opts ...grpc.CallOption) (*GroupSetUserRoleResp, error)
	// 删除组用户
	GroupDeleteUser(ctx context.Context, in *GroupDeleteUserReq, opts ...grpc.CallOption) (*GroupDeleteUserResp, error)
	// 向组添加问题
	GroupAddProblem(ctx context.Context, in *GroupAddProblemReq, opts ...grpc.CallOption) (*GroupAddProblemResp, error)
	// 从组删除问题
	GroupDeleteProblem(ctx context.Context, in *GroupDeleteProblemReq, opts ...grpc.CallOption) (*GroupDeleteProblemResp, error)
}

type moeJudgeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMoeJudgeSvcClient(cc grpc.ClientConnInterface) MoeJudgeSvcClient {
	return &moeJudgeSvcClient{cc}
}

func (c *moeJudgeSvcClient) ListJudge(ctx context.Context, in *ListJudgeReq, opts ...grpc.CallOption) (*ListJudgeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJudgeResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_ListJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) SubmitJudge(ctx context.Context, in *JudgeReq, opts ...grpc.CallOption) (*JudgeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JudgeResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_SubmitJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GetJudgeStatus(ctx context.Context, in *JudgeStatusReq, opts ...grpc.CallOption) (*JudgeStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JudgeStatusResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GetJudgeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) Try(ctx context.Context, in *TryReq, opts ...grpc.CallOption) (*TryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_Try_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GetWasm(ctx context.Context, in *WasmReq, opts ...grpc.CallOption) (*WasmResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WasmResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GetWasm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) CreateProblem(ctx context.Context, in *CreateProblemReq, opts ...grpc.CallOption) (*CreateProblemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProblemResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_ListGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GroupSetUserRole(ctx context.Context, in *GroupSetUserRoleReq, opts ...grpc.CallOption) (*GroupSetUserRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupSetUserRoleResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GroupSetUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GroupDeleteUser(ctx context.Context, in *GroupDeleteUserReq, opts ...grpc.CallOption) (*GroupDeleteUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupDeleteUserResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GroupDeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GroupAddProblem(ctx context.Context, in *GroupAddProblemReq, opts ...grpc.CallOption) (*GroupAddProblemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupAddProblemResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GroupAddProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moeJudgeSvcClient) GroupDeleteProblem(ctx context.Context, in *GroupDeleteProblemReq, opts ...grpc.CallOption) (*GroupDeleteProblemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupDeleteProblemResp)
	err := c.cc.Invoke(ctx, MoeJudgeSvc_GroupDeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoeJudgeSvcServer is the server API for MoeJudgeSvc service.
// All implementations must embed UnimplementedMoeJudgeSvcServer
// for forward compatibility.
//
// 定义判题服务
type MoeJudgeSvcServer interface {
	// 查询判题列表
	ListJudge(context.Context, *ListJudgeReq) (*ListJudgeResp, error)
	// 提交判题请求
	SubmitJudge(context.Context, *JudgeReq) (*JudgeResp, error)
	// 查询判题状态
	GetJudgeStatus(context.Context, *JudgeStatusReq) (*JudgeStatusResp, error)
	// 尝试运行
	Try(context.Context, *TryReq) (*TryResp, error)
	// 获取判题 Wasm
	GetWasm(context.Context, *WasmReq) (*WasmResp, error)
	// 创建问题
	CreateProblem(context.Context, *CreateProblemReq) (*CreateProblemResp, error)
	// 创建组
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 删除组
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	// 获取组列表
	ListGroup(context.Context, *ListGroupReq) (*ListGroupResp, error)
	// 设置组用户角色
	GroupSetUserRole(context.Context, *GroupSetUserRoleReq) (*GroupSetUserRoleResp, error)
	// 删除组用户
	GroupDeleteUser(context.Context, *GroupDeleteUserReq) (*GroupDeleteUserResp, error)
	// 向组添加问题
	GroupAddProblem(context.Context, *GroupAddProblemReq) (*GroupAddProblemResp, error)
	// 从组删除问题
	GroupDeleteProblem(context.Context, *GroupDeleteProblemReq) (*GroupDeleteProblemResp, error)
	mustEmbedUnimplementedMoeJudgeSvcServer()
}

// UnimplementedMoeJudgeSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoeJudgeSvcServer struct{}

func (UnimplementedMoeJudgeSvcServer) ListJudge(context.Context, *ListJudgeReq) (*ListJudgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJudge not implemented")
}
func (UnimplementedMoeJudgeSvcServer) SubmitJudge(context.Context, *JudgeReq) (*JudgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJudge not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GetJudgeStatus(context.Context, *JudgeStatusReq) (*JudgeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudgeStatus not implemented")
}
func (UnimplementedMoeJudgeSvcServer) Try(context.Context, *TryReq) (*TryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GetWasm(context.Context, *WasmReq) (*WasmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasm not implemented")
}
func (UnimplementedMoeJudgeSvcServer) CreateProblem(context.Context, *CreateProblemReq) (*CreateProblemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedMoeJudgeSvcServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMoeJudgeSvcServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMoeJudgeSvcServer) ListGroup(context.Context, *ListGroupReq) (*ListGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GroupSetUserRole(context.Context, *GroupSetUserRoleReq) (*GroupSetUserRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSetUserRole not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GroupDeleteUser(context.Context, *GroupDeleteUserReq) (*GroupDeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeleteUser not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GroupAddProblem(context.Context, *GroupAddProblemReq) (*GroupAddProblemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAddProblem not implemented")
}
func (UnimplementedMoeJudgeSvcServer) GroupDeleteProblem(context.Context, *GroupDeleteProblemReq) (*GroupDeleteProblemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeleteProblem not implemented")
}
func (UnimplementedMoeJudgeSvcServer) mustEmbedUnimplementedMoeJudgeSvcServer() {}
func (UnimplementedMoeJudgeSvcServer) testEmbeddedByValue()                     {}

// UnsafeMoeJudgeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoeJudgeSvcServer will
// result in compilation errors.
type UnsafeMoeJudgeSvcServer interface {
	mustEmbedUnimplementedMoeJudgeSvcServer()
}

func RegisterMoeJudgeSvcServer(s grpc.ServiceRegistrar, srv MoeJudgeSvcServer) {
	// If the following call pancis, it indicates UnimplementedMoeJudgeSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MoeJudgeSvc_ServiceDesc, srv)
}

func _MoeJudgeSvc_ListJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).ListJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_ListJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).ListJudge(ctx, req.(*ListJudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_SubmitJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).SubmitJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_SubmitJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).SubmitJudge(ctx, req.(*JudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GetJudgeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GetJudgeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GetJudgeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GetJudgeStatus(ctx, req.(*JudgeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_Try_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).Try(ctx, req.(*TryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GetWasm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WasmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GetWasm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GetWasm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GetWasm(ctx, req.(*WasmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).CreateProblem(ctx, req.(*CreateProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).ListGroup(ctx, req.(*ListGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GroupSetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSetUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GroupSetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GroupSetUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GroupSetUserRole(ctx, req.(*GroupSetUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GroupDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GroupDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GroupDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GroupDeleteUser(ctx, req.(*GroupDeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GroupAddProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAddProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GroupAddProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GroupAddProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GroupAddProblem(ctx, req.(*GroupAddProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoeJudgeSvc_GroupDeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeleteProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoeJudgeSvcServer).GroupDeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoeJudgeSvc_GroupDeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoeJudgeSvcServer).GroupDeleteProblem(ctx, req.(*GroupDeleteProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MoeJudgeSvc_ServiceDesc is the grpc.ServiceDesc for MoeJudgeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoeJudgeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MoeJudgeSvc",
	HandlerType: (*MoeJudgeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJudge",
			Handler:    _MoeJudgeSvc_ListJudge_Handler,
		},
		{
			MethodName: "SubmitJudge",
			Handler:    _MoeJudgeSvc_SubmitJudge_Handler,
		},
		{
			MethodName: "GetJudgeStatus",
			Handler:    _MoeJudgeSvc_GetJudgeStatus_Handler,
		},
		{
			MethodName: "Try",
			Handler:    _MoeJudgeSvc_Try_Handler,
		},
		{
			MethodName: "GetWasm",
			Handler:    _MoeJudgeSvc_GetWasm_Handler,
		},
		{
			MethodName: "CreateProblem",
			Handler:    _MoeJudgeSvc_CreateProblem_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MoeJudgeSvc_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MoeJudgeSvc_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _MoeJudgeSvc_ListGroup_Handler,
		},
		{
			MethodName: "GroupSetUserRole",
			Handler:    _MoeJudgeSvc_GroupSetUserRole_Handler,
		},
		{
			MethodName: "GroupDeleteUser",
			Handler:    _MoeJudgeSvc_GroupDeleteUser_Handler,
		},
		{
			MethodName: "GroupAddProblem",
			Handler:    _MoeJudgeSvc_GroupAddProblem_Handler,
		},
		{
			MethodName: "GroupDeleteProblem",
			Handler:    _MoeJudgeSvc_GroupDeleteProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/moejudge.proto",
}

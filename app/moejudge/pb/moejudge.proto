syntax = "proto3";

option go_package = "./pb";

enum LangType {
  golang = 0;
  rust = 1;
  c = 2;
  cpp = 3;
  java = 4;

  all = 66;
}

// 判题结果
message JudgeResult {
  UUID id = 1;             // 判题结果 ID
  UUID user_id = 2;    // 用户 ID
  uint32 status = 3;         // 判题状态
  string code = 4;       // 代码内容
  LangType lang = 5;       // 编程语言
  uint64 time_used = 6;      // 用时（可选）
  uint64 memory_used = 7;    // 使用内存（可选）
}

// 提交判题请求
message JudgeReq {
  UUID user_id = 1;
  UUID problem_id = 2; // 题目 ID
  bytes code = 3;       // 代码内容
  LangType lang = 4;       // 编程语言
}

// 提交判题响应
message JudgeResp {
  JudgeResult result = 1; // 判题结果
}

// 判题状态查询请求
message JudgeStatusReq {
  UUID user_id = 1;
  UUID judge_id = 2; // 提交 ID
}

// 判题状态查询响应
message JudgeStatusResp {
  JudgeResult result = 1; // 判题结果
}

// 判题列表查询请求
message ListJudgeReq {
  UUID judge_id = 1;         // ID（可选）
  UUID user_id = 2;    // 用户 ID（可选）
  UUID problem_id = 3; // 题目 ID（可选）
  UUID group_id = 4;   // 组 ID（可选）
  int32 lang = 5;
  int32 status = 6;     // 判题状态（可选）
  uint32 page = 7;        // 分页页码（可选）
  uint32 page_size = 8;   // 分页大小（可选）
}

// 判题列表查询响应
message ListJudgeResp {
  repeated JudgeResult list = 1; // 判题结果列表
  uint32 total = 2;              // 总记录数
}

// 尝试运行请求
message TryReq {
  UUID user_id = 1;
  UUID problem_id = 2; // 题目 ID
  bytes code = 3;       // 代码内容
  bytes input = 4;
  LangType lang = 5;       // 编程语言
}

// 尝试运行响应
message TryResp {
  string output = 1; // 输出结果
}

// 获取 Wasm 请求
message WasmReq {
  UUID user_id = 1;
  UUID problem_id = 2; // 题目 ID
  bytes code = 3;       // 代码内容
  LangType lang = 4;       // 编程语言
}

// 获取 Wasm 响应
message WasmResp {
  bytes wasm_binary = 1; // Wasm 二进制数据
  string compile_err = 2;
}

message Group {
  UUID id = 1;
  string title = 2;
  string content = 3;
}

message CreateGroupReq {
  UUID user_id = 1;
  string Title = 2;
  string Content = 3;
}

message CreateGroupResp {
  UUID id = 1;
}

message DeleteGroupReq {
  UUID id = 1;
  UUID operator_user_id = 2;
}

message DeleteGroupResp {}

message ListGroupReq {
  UUID group_id = 1;
  UUID user_id = 2;
  int32 min_role = 3;
}

message ListGroupResp {
  repeated Group groups = 1;
}

message GroupSetUserRoleReq {
  UUID operator_user_id = 1;
  UUID group_id = 2;
  UUID user_id = 3;
  uint32 role = 4;
}

message GroupSetUserRoleResp {}

message GroupDeleteUserReq {
  UUID operator_user_id = 1;
  UUID group_id = 2;
  UUID user_id = 3;
}

message GroupDeleteUserResp {}

message GroupAddProblemReq {
  UUID operator_user_id = 1;
  UUID group_id = 2;
  UUID problem_id = 3;
}

message GroupAddProblemResp {}

message GroupDeleteProblemReq {
  UUID operator_user_id = 1;
  UUID group_id = 2;
  UUID problem_id = 3;
}

message GroupDeleteProblemResp {}

message LangCtx {
  LangType lang = 1;
  string init_code = 2;
  string template = 3;
  uint64 time_limit = 4;
  uint64 memory_limit = 5;
}

message JudgeData {
  bytes input = 1;
  bytes output = 2;
}

message CreateProblemReq {
  UUID operator_user_id = 1;
  string title = 2;
  string content = 3;
  uint32 difficulty = 4;
  repeated LangCtx lang_ctx_arr = 5;
  repeated JudgeData judge_data_arr = 6;
}

message CreateProblemResp {
  UUID id = 1;
}

message UUID {
    fixed64 hi = 1;
    fixed64 lo = 2;
}

// 定义判题服务
service MoeJudgeSvc {
  // 查询判题列表
  rpc ListJudge (ListJudgeReq) returns (ListJudgeResp);

  // 提交判题请求
  rpc SubmitJudge (JudgeReq) returns (JudgeResp);

  // 查询判题状态
  rpc GetJudgeStatus (JudgeStatusReq) returns (JudgeStatusResp);

  // 尝试运行
  rpc Try (TryReq) returns (TryResp);

  // 获取判题 Wasm
  rpc GetWasm (WasmReq) returns (WasmResp);

  // 创建问题
  rpc CreateProblem (CreateProblemReq) returns (CreateProblemResp);

  // 删除问题
//  rpc DeleteProblem (DeleteProblemReq) returns (DeleteProblemResp);

  // 创建组
  rpc CreateGroup (CreateGroupReq) returns (CreateGroupResp);

  // 删除组
  rpc DeleteGroup (DeleteGroupReq) returns (DeleteGroupResp);

  // 获取组列表
  rpc ListGroup (ListGroupReq) returns (ListGroupResp);

  // 设置组用户角色
  rpc GroupSetUserRole (GroupSetUserRoleReq) returns (GroupSetUserRoleResp);

  // 删除组用户
  rpc GroupDeleteUser (GroupDeleteUserReq) returns (GroupDeleteUserResp);

  // 向组添加问题
  rpc GroupAddProblem (GroupAddProblemReq) returns (GroupAddProblemResp);

  // 从组删除问题
  rpc GroupDeleteProblem (GroupDeleteProblemReq) returns (GroupDeleteProblemResp);
}

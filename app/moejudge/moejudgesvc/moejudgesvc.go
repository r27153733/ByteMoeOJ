// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: moejudge.proto

package moejudgesvc

import (
	"context"

	"github.com/r27153733/ByteMoeOJ/app/moejudge/pb"

	"github.com/r27153733/fastgozero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateGroupReq         = pb.CreateGroupReq
	CreateGroupResp        = pb.CreateGroupResp
	CreateProblemReq       = pb.CreateProblemReq
	CreateProblemResp      = pb.CreateProblemResp
	DeleteGroupReq         = pb.DeleteGroupReq
	DeleteGroupResp        = pb.DeleteGroupResp
	Group                  = pb.Group
	GroupAddProblemReq     = pb.GroupAddProblemReq
	GroupAddProblemResp    = pb.GroupAddProblemResp
	GroupDeleteProblemReq  = pb.GroupDeleteProblemReq
	GroupDeleteProblemResp = pb.GroupDeleteProblemResp
	GroupDeleteUserReq     = pb.GroupDeleteUserReq
	GroupDeleteUserResp    = pb.GroupDeleteUserResp
	GroupSetUserRoleReq    = pb.GroupSetUserRoleReq
	GroupSetUserRoleResp   = pb.GroupSetUserRoleResp
	JudgeData              = pb.JudgeData
	JudgeReq               = pb.JudgeReq
	JudgeResp              = pb.JudgeResp
	JudgeResult            = pb.JudgeResult
	JudgeStatusReq         = pb.JudgeStatusReq
	JudgeStatusResp        = pb.JudgeStatusResp
	LangCtx                = pb.LangCtx
	ListGroupReq           = pb.ListGroupReq
	ListGroupResp          = pb.ListGroupResp
	ListJudgeReq           = pb.ListJudgeReq
	ListJudgeResp          = pb.ListJudgeResp
	TryReq                 = pb.TryReq
	TryResp                = pb.TryResp
	UUID                   = pb.UUID
	WasmReq                = pb.WasmReq
	WasmResp               = pb.WasmResp

	MoeJudgeSvc interface {
		// 查询判题列表
		ListJudge(ctx context.Context, in *ListJudgeReq, opts ...grpc.CallOption) (*ListJudgeResp, error)
		// 提交判题请求
		SubmitJudge(ctx context.Context, in *JudgeReq, opts ...grpc.CallOption) (*JudgeResp, error)
		// 查询判题状态
		GetJudgeStatus(ctx context.Context, in *JudgeStatusReq, opts ...grpc.CallOption) (*JudgeStatusResp, error)
		// 尝试运行
		Try(ctx context.Context, in *TryReq, opts ...grpc.CallOption) (*TryResp, error)
		// 获取判题 Wasm
		GetWasm(ctx context.Context, in *WasmReq, opts ...grpc.CallOption) (*WasmResp, error)
		// 创建问题
		CreateProblem(ctx context.Context, in *CreateProblemReq, opts ...grpc.CallOption) (*CreateProblemResp, error)
		// 创建组
		CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
		// 删除组
		DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
		// 获取组列表
		ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error)
		// 设置组用户角色
		GroupSetUserRole(ctx context.Context, in *GroupSetUserRoleReq, opts ...grpc.CallOption) (*GroupSetUserRoleResp, error)
		// 删除组用户
		GroupDeleteUser(ctx context.Context, in *GroupDeleteUserReq, opts ...grpc.CallOption) (*GroupDeleteUserResp, error)
		// 向组添加问题
		GroupAddProblem(ctx context.Context, in *GroupAddProblemReq, opts ...grpc.CallOption) (*GroupAddProblemResp, error)
		// 从组删除问题
		GroupDeleteProblem(ctx context.Context, in *GroupDeleteProblemReq, opts ...grpc.CallOption) (*GroupDeleteProblemResp, error)
	}

	defaultMoeJudgeSvc struct {
		cli zrpc.Client
	}
)

func NewMoeJudgeSvc(cli zrpc.Client) MoeJudgeSvc {
	return &defaultMoeJudgeSvc{
		cli: cli,
	}
}

// 查询判题列表
func (m *defaultMoeJudgeSvc) ListJudge(ctx context.Context, in *ListJudgeReq, opts ...grpc.CallOption) (*ListJudgeResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.ListJudge(ctx, in, opts...)
}

// 提交判题请求
func (m *defaultMoeJudgeSvc) SubmitJudge(ctx context.Context, in *JudgeReq, opts ...grpc.CallOption) (*JudgeResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.SubmitJudge(ctx, in, opts...)
}

// 查询判题状态
func (m *defaultMoeJudgeSvc) GetJudgeStatus(ctx context.Context, in *JudgeStatusReq, opts ...grpc.CallOption) (*JudgeStatusResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GetJudgeStatus(ctx, in, opts...)
}

// 尝试运行
func (m *defaultMoeJudgeSvc) Try(ctx context.Context, in *TryReq, opts ...grpc.CallOption) (*TryResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.Try(ctx, in, opts...)
}

// 获取判题 Wasm
func (m *defaultMoeJudgeSvc) GetWasm(ctx context.Context, in *WasmReq, opts ...grpc.CallOption) (*WasmResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GetWasm(ctx, in, opts...)
}

// 创建问题
func (m *defaultMoeJudgeSvc) CreateProblem(ctx context.Context, in *CreateProblemReq, opts ...grpc.CallOption) (*CreateProblemResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.CreateProblem(ctx, in, opts...)
}

// 创建组
func (m *defaultMoeJudgeSvc) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

// 删除组
func (m *defaultMoeJudgeSvc) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.DeleteGroup(ctx, in, opts...)
}

// 获取组列表
func (m *defaultMoeJudgeSvc) ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.ListGroup(ctx, in, opts...)
}

// 设置组用户角色
func (m *defaultMoeJudgeSvc) GroupSetUserRole(ctx context.Context, in *GroupSetUserRoleReq, opts ...grpc.CallOption) (*GroupSetUserRoleResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GroupSetUserRole(ctx, in, opts...)
}

// 删除组用户
func (m *defaultMoeJudgeSvc) GroupDeleteUser(ctx context.Context, in *GroupDeleteUserReq, opts ...grpc.CallOption) (*GroupDeleteUserResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GroupDeleteUser(ctx, in, opts...)
}

// 向组添加问题
func (m *defaultMoeJudgeSvc) GroupAddProblem(ctx context.Context, in *GroupAddProblemReq, opts ...grpc.CallOption) (*GroupAddProblemResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GroupAddProblem(ctx, in, opts...)
}

// 从组删除问题
func (m *defaultMoeJudgeSvc) GroupDeleteProblem(ctx context.Context, in *GroupDeleteProblemReq, opts ...grpc.CallOption) (*GroupDeleteProblemResp, error) {
	client := pb.NewMoeJudgeSvcClient(m.cli.Conn())
	return client.GroupDeleteProblem(ctx, in, opts...)
}

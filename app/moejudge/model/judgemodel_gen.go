// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/r27153733/fastgozero/core/stores/builder"
	"github.com/r27153733/fastgozero/core/stores/sqlx"
	"github.com/r27153733/fastgozero/core/stringx"

	"github.com/r27153733/ByteMoeOJ/lib/uuid"
)

var (
	judgeFieldNames                  = builder.RawFieldNames(&Judge{}, true)
	judgeRows                        = strings.Join(judgeFieldNames, ",")
	judgeRowsExpectAutoSet           = strings.Join(stringx.Remove(judgeFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	judgeRowsExpectAutoSetAndIDArray = stringx.Remove(judgeFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at")
	judgeRowsExpectAutoSetAndID      = strings.Join(judgeRowsExpectAutoSetAndIDArray, ",")
	judgeRowsWithPlaceHolder         = builder.PostgreSqlJoin(stringx.Remove(judgeFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	judgeModel interface {
		Insert(ctx context.Context, data *Judge) (sql.Result, error)
		FindOne(ctx context.Context, id uuid.UUID) (*Judge, error)
		FindOneLock(ctx context.Context, id uuid.UUID) (*Judge, error)
		Update(ctx context.Context, data *Judge) error
		Upsert(ctx context.Context, data *Judge) (sql.Result, error)
		Delete(ctx context.Context, id uuid.UUID) error
	}

	defaultJudgeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Judge struct {
		Id         uuid.UUID `db:"id"`
		UserId     uuid.UUID `db:"user_id"`
		Status     int16     `db:"status"`
		Code       string    `db:"code"`
		Lang       int16     `db:"lang"`
		TimeUsed   int64     `db:"time_used"`
		MemoryUsed int64     `db:"memory_used"`
		ProblemId  uuid.UUID `db:"problem_id"`
		CreatedAt  time.Time `db:"created_at"` // 创建时间
	}
)

func newJudgeModel(conn sqlx.SqlConn) *defaultJudgeModel {
	return &defaultJudgeModel{
		conn:  conn,
		table: `"public"."judge"`,
	}
}

func (m *defaultJudgeModel) Delete(ctx context.Context, id uuid.UUID) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultJudgeModel) FindOne(ctx context.Context, id uuid.UUID) (*Judge, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", judgeRows, m.table)
	var resp Judge
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJudgeModel) FindOneLock(ctx context.Context, id uuid.UUID) (*Judge, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1 for update", judgeRows, m.table)
	var resp Judge
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJudgeModel) Insert(ctx context.Context, data *Judge) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, judgeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Status, data.Code, data.Lang, data.TimeUsed, data.MemoryUsed, data.ProblemId)
	return ret, err
}

func (m *defaultJudgeModel) Update(ctx context.Context, data *Judge) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, judgeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Status, data.Code, data.Lang, data.TimeUsed, data.MemoryUsed, data.ProblemId)
	return err
}

func (m *defaultJudgeModel) tableName() string {
	return m.table
}

func (m *defaultJudgeModel) Upsert(ctx context.Context, data *Judge) (sql.Result, error) {
	query := fmt.Sprintf(`
		insert into %s (%s)
		values ($1, $2, $3, $4, $5, $6, $7, $8)
		on conflict (id)
		do update set %s
	`, m.table, judgeRowsExpectAutoSet, judgeRowsWithPlaceHolder)

	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Status, data.Code, data.Lang, data.TimeUsed, data.MemoryUsed, data.ProblemId)
	return ret, err
}

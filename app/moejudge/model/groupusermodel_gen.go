// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/r27153733/fastgozero/core/stores/builder"
	"github.com/r27153733/fastgozero/core/stores/sqlx"
	"github.com/r27153733/fastgozero/core/stringx"

	"github.com/r27153733/ByteMoeOJ/lib/uuid"
)

var (
	groupUserFieldNames                  = builder.RawFieldNames(&GroupUser{}, true)
	groupUserRows                        = strings.Join(groupUserFieldNames, ",")
	groupUserRowsExpectAutoSet           = strings.Join(stringx.Remove(groupUserFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	groupUserRowsExpectAutoSetAndIDArray = stringx.Remove(groupUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at")
	groupUserRowsExpectAutoSetAndID      = strings.Join(groupUserRowsExpectAutoSetAndIDArray, ",")
	groupUserRowsWithPlaceHolder         = builder.PostgreSqlJoin(stringx.Remove(groupUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	groupUserModel interface {
		Insert(ctx context.Context, data *GroupUser) (sql.Result, error)
		FindOne(ctx context.Context, id uuid.UUID) (*GroupUser, error)
		FindOneLock(ctx context.Context, id uuid.UUID) (*GroupUser, error)
		FindOneByUserIdGroupId(ctx context.Context, userId uuid.UUID, groupId uuid.UUID) (*GroupUser, error)
		DeleteByUserIdGroupId(ctx context.Context, userId uuid.UUID, groupId uuid.UUID) error
		Update(ctx context.Context, data *GroupUser) error
		Upsert(ctx context.Context, data *GroupUser) (sql.Result, error)
		Delete(ctx context.Context, id uuid.UUID) error
	}

	defaultGroupUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupUser struct {
		Id        uuid.UUID `db:"id"`
		GroupId   uuid.UUID `db:"group_id"`
		UserId    uuid.UUID `db:"user_id"`
		Role      int16     `db:"role"`
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newGroupUserModel(conn sqlx.SqlConn) *defaultGroupUserModel {
	return &defaultGroupUserModel{
		conn:  conn,
		table: `"public"."group_user"`,
	}
}

func (m *defaultGroupUserModel) Delete(ctx context.Context, id uuid.UUID) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupUserModel) FindOne(ctx context.Context, id uuid.UUID) (*GroupUser, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", groupUserRows, m.table)
	var resp GroupUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUserModel) FindOneLock(ctx context.Context, id uuid.UUID) (*GroupUser, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1 for update", groupUserRows, m.table)
	var resp GroupUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUserModel) FindOneByUserIdGroupId(ctx context.Context, userId uuid.UUID, groupId uuid.UUID) (*GroupUser, error) {
	var resp GroupUser
	query := fmt.Sprintf("select %s from %s where user_id = $1 and group_id = $2 limit 1", groupUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, groupId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupUserModel) DeleteByUserIdGroupId(ctx context.Context, userId uuid.UUID, groupId uuid.UUID) error {
	query := fmt.Sprintf("delete from %s where user_id = $1 and group_id = $2", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId, groupId)
	return err
}

func (m *defaultGroupUserModel) Insert(ctx context.Context, data *GroupUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, groupUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.GroupId, data.UserId, data.Role)
	return ret, err
}

func (m *defaultGroupUserModel) Update(ctx context.Context, newData *GroupUser) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, groupUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.GroupId, newData.UserId, newData.Role)
	return err
}

func (m *defaultGroupUserModel) tableName() string {
	return m.table
}

func (m *defaultGroupUserModel) Upsert(ctx context.Context, data *GroupUser) (sql.Result, error) {
	query := fmt.Sprintf(`
		insert into %s (%s)
		values ($1, $2, $3, $4)
		on conflict (id)
		do update set %s
	`, m.table, groupUserRowsExpectAutoSet, groupUserRowsWithPlaceHolder)

	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.GroupId, data.UserId, data.Role)
	return ret, err
}

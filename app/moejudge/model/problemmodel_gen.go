// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/r27153733/fastgozero/core/stores/builder"
	"github.com/r27153733/fastgozero/core/stores/sqlx"
	"github.com/r27153733/fastgozero/core/stringx"
)

var (
	problemFieldNames                  = builder.RawFieldNames(&Problem{}, true)
	problemRows                        = strings.Join(problemFieldNames, ",")
	problemRowsExpectAutoSet           = strings.Join(stringx.Remove(problemFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	problemRowsExpectAutoSetAndIDArray = stringx.Remove(problemFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at")
	problemRowsExpectAutoSetAndID      = strings.Join(problemRowsExpectAutoSetAndIDArray, ",")
	problemRowsWithPlaceHolder         = builder.PostgreSqlJoin(stringx.Remove(problemFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	problemModel interface {
		Insert(ctx context.Context, data *Problem) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Problem, error)
		FindOneLock(ctx context.Context, id string) (*Problem, error)
		Update(ctx context.Context, data *Problem) error
		Upsert(ctx context.Context, data *Problem) (sql.Result, error)
		Delete(ctx context.Context, id string) error
	}

	defaultProblemModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Problem struct {
		Id         string `db:"id"`
		Title      string `db:"title"`
		Content    string `db:"content"`
		Difficulty int16  `db:"difficulty"`
		UserId     string `db:"user_id"`
	}
)

func newProblemModel(conn sqlx.SqlConn) *defaultProblemModel {
	return &defaultProblemModel{
		conn:  conn,
		table: `"public"."problem"`,
	}
}

func (m *defaultProblemModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProblemModel) FindOne(ctx context.Context, id string) (*Problem, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", problemRows, m.table)
	var resp Problem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) FindOneLock(ctx context.Context, id string) (*Problem, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1 for update", problemRows, m.table)
	var resp Problem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) Insert(ctx context.Context, data *Problem) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, problemRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Content, data.Difficulty, data.UserId)
	return ret, err
}

func (m *defaultProblemModel) Update(ctx context.Context, data *Problem) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, problemRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Content, data.Difficulty, data.UserId)
	return err
}

func (m *defaultProblemModel) Upsert(ctx context.Context, data *Problem) (sql.Result, error) {
	query := fmt.Sprintf(`
		insert into %s (%s)
		values ($1, $2, $3, $4, $5, $6, $7, $8)
		on conflict (id)
		do update set %s
	`, m.table, problemRowsExpectAutoSet, problemRowsWithPlaceHolder)

	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Content, data.Difficulty, data.UserId)
	return ret, err
}

func (m *defaultProblemModel) tableName() string {
	return m.table
}

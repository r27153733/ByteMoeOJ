// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/r27153733/fastgozero/core/stores/builder"
	"github.com/r27153733/fastgozero/core/stores/sqlx"
	"github.com/r27153733/fastgozero/core/stringx"
)

var (
	problemLangFieldNames                  = builder.RawFieldNames(&ProblemLang{}, true)
	problemLangRows                        = strings.Join(problemLangFieldNames, ",")
	problemLangRowsExpectAutoSet           = strings.Join(stringx.Remove(problemLangFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	problemLangRowsExpectAutoSetAndIDArray = stringx.Remove(problemLangFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at")
	problemLangRowsExpectAutoSetAndID      = strings.Join(problemLangRowsExpectAutoSetAndIDArray, ",")
	problemLangRowsWithPlaceHolder         = builder.PostgreSqlJoin(stringx.Remove(problemLangFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	problemLangModel interface {
		Insert(ctx context.Context, data *ProblemLang) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ProblemLang, error)
		FindOneLock(ctx context.Context, id string) (*ProblemLang, error)
		FindOneByProblemIdLang(ctx context.Context, problemId string, lang int16) (*ProblemLang, error)
		DeleteByProblemIdLang(ctx context.Context, problemId string, lang int16) error
		Update(ctx context.Context, data *ProblemLang) error
		Upsert(ctx context.Context, data *ProblemLang) (sql.Result, error)
		Delete(ctx context.Context, id string) error
	}

	defaultProblemLangModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProblemLang struct {
		Id          string `db:"id"`
		ProblemId   string `db:"problem_id"`
		Lang        int16  `db:"lang"`
		InitCode    string `db:"init_code"`
		Template    string `db:"template"`
		TimeLimit   int64  `db:"time_limit"`
		MemoryLimit int64  `db:"memory_limit"`
	}
)

func newProblemLangModel(conn sqlx.SqlConn) *defaultProblemLangModel {
	return &defaultProblemLangModel{
		conn:  conn,
		table: `"public"."problem_lang"`,
	}
}

func (m *defaultProblemLangModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProblemLangModel) FindOne(ctx context.Context, id string) (*ProblemLang, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", problemLangRows, m.table)
	var resp ProblemLang
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemLangModel) FindOneLock(ctx context.Context, id string) (*ProblemLang, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1 for update", problemLangRows, m.table)
	var resp ProblemLang
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemLangModel) FindOneByProblemIdLang(ctx context.Context, problemId string, lang int16) (*ProblemLang, error) {
	var resp ProblemLang
	query := fmt.Sprintf("select %s from %s where problem_id = $1 and lang = $2 limit 1", problemLangRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, problemId, lang)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemLangModel) DeleteByProblemIdLang(ctx context.Context, problemId string, lang int16) error {
	query := fmt.Sprintf("delete from %s where problem_id = $1 and lang = $2 limit 1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, problemId, lang)
	return err
}

func (m *defaultProblemLangModel) Insert(ctx context.Context, data *ProblemLang) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, problemLangRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ProblemId, data.Lang, data.InitCode, data.Template, data.TimeLimit, data.MemoryLimit)
	return ret, err
}

func (m *defaultProblemLangModel) Update(ctx context.Context, newData *ProblemLang) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, problemLangRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.ProblemId, newData.Lang, newData.InitCode, newData.Template, newData.TimeLimit, newData.MemoryLimit)
	return err
}

func (m *defaultProblemLangModel) Upsert(ctx context.Context, newData *ProblemLang) (sql.Result, error) {
	query := fmt.Sprintf(`
		insert into %s (%s)
		values ($1, $2, $3, $4, $5, $6, $7, $8)
		on conflict (id)
		do update set %s
	`, m.table, problemLangRowsExpectAutoSet, problemLangRowsWithPlaceHolder)

	ret, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.ProblemId, newData.Lang, newData.InitCode, newData.Template, newData.TimeLimit, newData.MemoryLimit)
	return ret, err
}

func (m *defaultProblemLangModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: moejudge.proto

package server

import (
	"context"

	"github.com/r27153733/ByteMoeOJ/app/moejudge/internal/logic"
	"github.com/r27153733/ByteMoeOJ/app/moejudge/internal/svc"
	"github.com/r27153733/ByteMoeOJ/app/moejudge/pb"
)

type MoeJudgeSvcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedMoeJudgeSvcServer
}

func NewMoeJudgeSvcServer(svcCtx *svc.ServiceContext) *MoeJudgeSvcServer {
	return &MoeJudgeSvcServer{
		svcCtx: svcCtx,
	}
}

// 查询判题列表
func (s *MoeJudgeSvcServer) ListJudge(ctx context.Context, in *pb.ListJudgeReq) (*pb.ListJudgeResp, error) {
	l := logic.NewListJudgeLogic(ctx, s.svcCtx)
	return l.ListJudge(in)
}

// 提交判题请求
func (s *MoeJudgeSvcServer) SubmitJudge(ctx context.Context, in *pb.JudgeReq) (*pb.JudgeResp, error) {
	l := logic.NewSubmitJudgeLogic(ctx, s.svcCtx)
	return l.SubmitJudge(in)
}

// 查询判题状态
func (s *MoeJudgeSvcServer) GetJudgeStatus(ctx context.Context, in *pb.JudgeStatusReq) (*pb.JudgeStatusResp, error) {
	l := logic.NewGetJudgeStatusLogic(ctx, s.svcCtx)
	return l.GetJudgeStatus(in)
}

// 尝试运行
func (s *MoeJudgeSvcServer) Try(ctx context.Context, in *pb.TryReq) (*pb.TryResp, error) {
	l := logic.NewTryLogic(ctx, s.svcCtx)
	return l.Try(in)
}

// 获取判题 Wasm
func (s *MoeJudgeSvcServer) GetWasm(ctx context.Context, in *pb.WasmReq) (*pb.WasmResp, error) {
	l := logic.NewGetWasmLogic(ctx, s.svcCtx)
	return l.GetWasm(in)
}

// 创建问题
func (s *MoeJudgeSvcServer) CreateProblem(ctx context.Context, in *pb.CreateProblemReq) (*pb.CreateProblemResp, error) {
	l := logic.NewCreateProblemLogic(ctx, s.svcCtx)
	return l.CreateProblem(in)
}

// 创建组
func (s *MoeJudgeSvcServer) CreateGroup(ctx context.Context, in *pb.CreateGroupReq) (*pb.CreateGroupResp, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

// 删除组
func (s *MoeJudgeSvcServer) DeleteGroup(ctx context.Context, in *pb.DeleteGroupReq) (*pb.DeleteGroupResp, error) {
	l := logic.NewDeleteGroupLogic(ctx, s.svcCtx)
	return l.DeleteGroup(in)
}

// 获取组列表
func (s *MoeJudgeSvcServer) ListGroup(ctx context.Context, in *pb.ListGroupReq) (*pb.ListGroupResp, error) {
	l := logic.NewListGroupLogic(ctx, s.svcCtx)
	return l.ListGroup(in)
}

// 设置组用户角色
func (s *MoeJudgeSvcServer) GroupSetUserRole(ctx context.Context, in *pb.GroupSetUserRoleReq) (*pb.GroupSetUserRoleResp, error) {
	l := logic.NewGroupSetUserRoleLogic(ctx, s.svcCtx)
	return l.GroupSetUserRole(in)
}

// 删除组用户
func (s *MoeJudgeSvcServer) GroupDeleteUser(ctx context.Context, in *pb.GroupDeleteUserReq) (*pb.GroupDeleteUserResp, error) {
	l := logic.NewGroupDeleteUserLogic(ctx, s.svcCtx)
	return l.GroupDeleteUser(in)
}

// 向组添加问题
func (s *MoeJudgeSvcServer) GroupAddProblem(ctx context.Context, in *pb.GroupAddProblemReq) (*pb.GroupAddProblemResp, error) {
	l := logic.NewGroupAddProblemLogic(ctx, s.svcCtx)
	return l.GroupAddProblem(in)
}

// 从组删除问题
func (s *MoeJudgeSvcServer) GroupDeleteProblem(ctx context.Context, in *pb.GroupDeleteProblemReq) (*pb.GroupDeleteProblemResp, error) {
	l := logic.NewGroupDeleteProblemLogic(ctx, s.svcCtx)
	return l.GroupDeleteProblem(in)
}
